{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/getting-started/","result":{"data":{"markdownRemark":{"html":"<h2>Getting Started</h2>\n<p>Install <code>monodeploy</code>:</p>\n<pre><code class=\"language-bash\">yarn add -D monodeploy\nyarn monodeploy --dry-run\n</code></pre>\n<p>Edit your project's root <code>package.json</code>:</p>\n<ol>\n<li>Set <code>\"private\": true</code></li>\n<li>Set \"workspaces\": [\"packages/*\"] (you can use a different glob to match your monorepo layout)</li>\n<li>Create a <code>monodeploy.config.js</code> file and set it to:</li>\n</ol>\n<pre><code class=\"language-js\">module.exports = {}\n</code></pre>\n<p>You'll be extending this file as you make changes to your project's publish configuration.</p>\n<p>For help with the CLI options:</p>\n<pre><code class=\"language-bash\">yarn monodeploy --help\n</code></pre>\n<p>or see the <a href=\"../configuration\">Configuration</a> page for more details.</p>\n<h3>API</h3>\n<p>Monodeploy supports both a Command Line Interface, as well as a Node API.</p>\n<h4>CLI</h4>\n<p>For the CLI, use the <code>--help</code> flag for a list of options.</p>\n<pre><code class=\"language-bash\">yarn monodeploy --help\n</code></pre>\n<p>If you are okay with the defaults, you can go ahead and add a call to monodeploy to your CI's publish stage:</p>\n<pre><code class=\"language-bash\">yarn monodeploy --push\n</code></pre>\n<p>If you omit <code>--push</code>, you can manually push the tags on success:</p>\n<pre><code class=\"language-bash\">yarn monodeploy &#x26;&#x26; git push --tags\n</code></pre>\n<p>Or to give things a try first, run monodeploy in dry run mode with verbose logging. Dry run mode won't modify the remote registry, or git.</p>\n<pre><code class=\"language-bash\">yarn monodeploy --dry-run --log-level 0\n</code></pre>\n<p>The CLI provides a few sensible defaults, however if using the Node API, you will have to provide all relevant information.</p>\n<p>You can also pass a <code>--config-file</code> flag to load options from a configuration file. The file should export an object matching the MonodeployConfiguration interface (with all properties as optional). CLI flags take precedence over the configuration file.</p>\n<p>Example config file:</p>\n<pre><code class=\"language-js\">module.exports = {\n    dryRun: false,\n    git: {\n        baseBranch: 'main',\n        commitSha: 'HEAD',\n        remote: 'origin',\n        push: true,\n    },\n    conventionalChangelogConfig: '@tophat/conventional-changelog-config',\n    access: 'public',\n    persistVersions: false,\n    changesetIgnorePatterns: ['**/*.test.js'],\n}\n</code></pre>\n<h4>Node API</h4>\n<p>To use the API:</p>\n<pre><code class=\"language-ts\">import type { MonodeployConfiguration }  from '@monodeploy/types'\nimport monodeploy from '@monodeploy/node'\n\ntry {\n    const config: MonodeployConfiguration = {\n        cwd: process.cwd(),\n        dryRun: false,\n        git: {\n            baseBranch: 'main',\n            commitSha: 'HEAD',\n            remote: 'origin',\n            push: true,\n        },\n        conventionalChangelogConfig: '@tophat/conventional-changelog-config',\n        access: 'public',\n        persistVersions: false,\n    }\n    const changeset = await monodeploy(config)\n} catch (err) {\n    console.error(err)\n}\n</code></pre>\n<h3>Changelog</h3>\n<p>If you choose to use the <code>--prepend-changelog CHANGELOG.md</code> flag or related API config property, in your CHANGELOG.md file you'll need to insert a marker to let monodeploy know where to insert the changelog entries. For example:</p>\n<pre><code class=\"language-md\"># My Example Changelog\n\nSome blurb here.\n\n&#x3C;!-- MONODEPLOY:BELOW -->\n\n## v1.0.0\n\nSome entry.\n</code></pre>\n<p>The marker <code>&#x3C;!-- MONODEPLOY:BELOW --></code> must match exactly. It is whitespace and case-sensitive.</p>\n<p>You can use the template variable <code>&#x3C;packageDir></code> to create individual changelogs per package, like so:</p>\n<pre><code class=\"language-bash\">--prepend-changelog \"&#x3C;packageDir>/CHANGELOG.md\"\n</code></pre>","frontmatter":{"slug":"/getting-started","title":"Getting Started - Monodeploy"}}},"pageContext":{"id":"a2a30f0f-9de2-51bd-a6c3-b929b64a7447","frontmatter__slug":"/getting-started","__params":{"frontmatter__slug":"getting-started"}}},"staticQueryHashes":["3649515864","63159454"]}