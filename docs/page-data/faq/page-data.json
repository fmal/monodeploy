{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/faq/","result":{"data":{"markdownRemark":{"html":"<h2>FAQ</h2>\n<h3>Can I use monodeploy for non-JavaScript projects?</h3>\n<p>Yes. The only requirement is that you organize your project using Yarn Berry (i.e. Yarn v2+). You can create a minimal Yarn project by creating a root <code>package.json</code> and then one <code>package.json</code> per package/workspace. In this scenario, you likely want to use the \"No Registry\" mode.</p>\n<p>Although designed for publishing to NPM, you can disable all npm interactions by passing in a <code>--no-registry</code> flag to the CLI or enabling <code>noRegistry</code> in your config file. Note that this is different than enabling dry-run, in that even reads from npm are disabled. If using \"No Registry\" mode, you should also enable <code>--persistVersions</code> (<code>persistVersions</code>) and commit the modified package.json files to your repository, otherwise there's no proper reference for the package versions.</p>\n<h3>How can I preview changes before publishing?</h3>\n<p>You can run:</p>\n<pre><code class=\"language-bash\">yarn monodeploy --dry-run --changeset-filename=-\n</code></pre>\n<p>to implicitly disable logs and only output the changeset data. This is useful for previewing changes or determining which packages will be modified from a Pull Request.</p>","frontmatter":{"slug":"/faq","title":"Frequently Asked Questions - Monodeploy"}}},"pageContext":{"id":"b31e1f9f-aa31-5a31-984c-6bcf642ad742","frontmatter__slug":"/faq","__params":{"frontmatter__slug":"faq"}}},"staticQueryHashes":["3649515864","63159454"]}